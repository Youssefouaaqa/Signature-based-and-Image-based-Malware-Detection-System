from flask import Flask, request, jsonify, render_template
from flask_pymongo import PyMongo
from werkzeug.utils import secure_filename
import os
import cv2
from skimage.feature import hog
import joblib
import plotly.express as px
import pandas as pd
from flask_cors import CORS


app = Flask(__name__)
CORS(app)  # This will allow all origins

#cors = CORS(app, resources={r"/*": {"origins": ["http://localhost:4200"]}})

# MongoDB Configuration
app.config["MONGO_URI"] = "mongodb+srv://mohammedbendahrass:SameFarobi9902@cluster0.azkcv7v.mongodb.net/malwareDB"
mongo = PyMongo(app)

# Load the model
MODEL_PATH = 'best_model_RDM.pkl'
with open(MODEL_PATH, 'rb') as model_file:
    classifier = joblib.load(model_file)

# Function to extract features using HOG
def extract_features(image_path):
    image = cv2.imread(image_path)
    image = cv2.resize(image, (64, 64))
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    hog_features, _ = hog(gray_image, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True)
    return hog_features

@app.route('/predict', methods=["POST"])
def predict():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    
    filename = secure_filename(file.filename)
    image_path = os.path.join("uploads", filename)
    file.save(image_path)

    try:
        features = extract_features(image_path).reshape(1, -1)
        prediction = classifier.predict(features)
        prediction_result = 'malware' if prediction[0] == 1 else 'benign'

        # Save result to MongoDB
        mongo.db.predictions.insert_one({
            "filename": filename,
            "prediction": prediction_result
        })

        return jsonify({"prediction": prediction_result})
    finally:
        os.remove(image_path)

@app.route('/results', methods=["GET"])
def results():
    results = mongo.db.predictions.find()
    output = []
    for result in results:
        output.append({"filename": result["filename"], "prediction": result["prediction"]})
    return jsonify({"results": output})

@app.route('/', methods=["GET"])
def dashboard():
    results = mongo.db.predictions.find()
    data = [{"filename": result["filename"], "prediction": result["prediction"]} for result in results]
    df = pd.DataFrame(data)
    malware_count = df[df["prediction"] == "malware"].shape[0]
    benign_count = df[df["prediction"] == "benign"].shape[0]
    return render_template('dashboard.html', malware_count=malware_count, benign_count=benign_count)

if __name__ == '__main__':
    app.run(debug=True, port=5003)































# from flask import Flask, request, jsonify
# from flask_pymongo import PyMongo
# from werkzeug.utils import secure_filename
# import os
# import cv2
# from skimage.feature import hog
# import joblib

# app = Flask(__name__)

# # MongoDB Configuration
# app.config["MONGO_URI"] = "mongodb+srv://mohammedbendahrass:SameFarobi9902@cluster0.azkcv7v.mongodb.net/malwareDB"
# mongo = PyMongo(app)

# # Load the model
# MODEL_PATH = 'best_model_RDM.pkl'
# with open(MODEL_PATH, 'rb') as model_file:
#     classifier = joblib.load(model_file)

# # Function to extract features using HOG
# def extract_features(image_path):
#     image = cv2.imread(image_path)
#     image = cv2.resize(image, (64, 64))
#     gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#     hog_features, _ = hog(gray_image, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=True)
#     return hog_features

# @app.route('/predict', methods=["POST"])
# def predict():
#     if 'file' not in request.files:
#         return jsonify({"error": "No file part"}), 400
#     file = request.files['file']
#     if file.filename == '':
#         return jsonify({"error": "No selected file"}), 400
    
#     filename = secure_filename(file.filename)
#     image_path = os.path.join("uploads", filename)
#     file.save(image_path)

#     features = extract_features(image_path).reshape(1, -1)
#     prediction = classifier.predict(features)
#     prediction_result = 'malware' if prediction[0] == 1 else 'benign'

#     # Save result to MongoDB
#     mongo.db.predictions.insert_one({
#         "filename": filename,
#         "prediction": prediction_result
#     })

#     return jsonify({"prediction": prediction_result})

# @app.route('/results', methods=["GET"])
# def results():
#     results = mongo.db.predictions.find()
#     output = []
#     for result in results:
#         output.append({"filename": result["filename"], "prediction": result["prediction"]})
#     return jsonify({"results": output})

# if __name__ == '__main__':
#     app.run(debug=True, port=5003)
