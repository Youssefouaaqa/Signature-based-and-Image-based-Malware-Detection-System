from flask import Flask, request, jsonify, redirect, url_for, render_template
from werkzeug.utils import secure_filename
import os
import joblib
import pickle
from extract_PE_heades import extract_infos

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = './uploads'
ALLOWED_EXTENSIONS = {'exe', 'dll'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        try:
            result = classify_file(filepath)
        finally:
            try:
                os.remove(filepath)  # Clean up the uploaded file
            except PermissionError:
                pass  # Handle the error or retry logic
        return jsonify(result=result)
    
    return redirect(request.url)

def classify_file(filepath):
    # Load classifier and features
    clf = joblib.load('models/classifier.pkl')
    with open('models/features.pkl', 'rb') as f:
        features = pickle.load(f)

    # Extract features from the PE file
    data = extract_infos(filepath)

    # Align extracted features with the expected features
    pe_features = []
    for feature in features:
        if feature in data:
            pe_features.append(data[feature])
        else:
            pe_features.append(0)  # or handle missing features appropriately

    # Predict using the classifier
    res = clf.predict([pe_features])[0]
    result = 'malicious' if res == 0 else 'legitimate'
    
    return result

if __name__ == '__main__':
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    app.run(debug=True)
